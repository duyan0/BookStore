@model List<UserOrderViewModel>
@{
    ViewData["Title"] = "Lịch sử đơn hàng";
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
Lịch sử đơn hàng                </h2>
                <a href="@Url.Action("Dashboard", "User")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Quay lại
                </a>
            </div>
        </div>
    </div>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (Model.Any())
    {
        <div class="row">
            @foreach (var order in Model)
            {
                <div class="col-lg-6 mb-4">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Đơn hàng #@order.Id</h6>
                            <span class="badge @order.StatusBadgeClass">@order.StatusText</span>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col-6">
                                    <small class="text-muted">Ngày đặt:</small>
                                    <div>@order.OrderDateFormatted</div>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Tổng tiền:</small>
                                    <div class="text-danger fw-bold">@order.TotalAmountFormatted</div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <small class="text-muted">Thanh toán:</small>
                                <div>@order.PaymentMethod</div>
                            </div>

                            @if (order.OrderDetails.Any())
                            {
                                <div class="mb-3">
                                    <small class="text-muted">Sản phẩm (@order.OrderDetails.Count):</small>
                                    <div class="mt-1">
                                        @foreach (var item in order.OrderDetails.Take(2))
                                        {
                                            <div class="d-flex align-items-center mb-1">
                                                <img src="@item.BookImageUrl" alt="@item.BookTitle"
                                                     class="me-2 rounded" style="width: 30px; height: 40px; object-fit: cover;">
                                                <small>@item.BookTitle (@item.Quantity)</small>
                                            </div>
                                        }
                                        @if (order.OrderDetails.Count > 2)
                                        {
                                            <small class="text-muted">... và @(order.OrderDetails.Count - 2) sản phẩm khác</small>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <a asp-action="OrderDetails" asp-route-id="@order.Id" class="btn btn-primary btn-sm">
                                        <i class="fas fa-eye me-1"></i>Xem chi tiết
                                    </a>
                                    @if (order.Status == "Pending")
                                    {
                                        <button class="btn btn-outline-danger btn-sm ms-2"
                                                onclick="alert('Chức năng hủy đơn hàng sẽ được cập nhật sớm!')">
                                            <i class="fas fa-times me-1"></i>Hủy đơn
                                        </button>
                                    }
                                </div>

                                @if (order.Status == "Completed")
                                {
                                    <button class="btn btn-success btn-sm"
                                            onclick="reorderItems(@order.Id)"
                                            id="reorderBtn_@order.Id"
                                            title="Đặt lại các sản phẩm trong đơn hàng này">
                                        <i class="fas fa-redo me-1"></i>Mua lại
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="text-center py-5">
                    <i class="fas fa-shopping-bag fa-5x text-muted mb-4"></i>
                    <h4 class="text-muted">Bạn chưa có đơn hàng nào</h4>
                    <p class="text-muted">Hãy khám phá cửa hàng và tìm những cuốn sách yêu thích!</p>
                    <a href="@Url.Action("Index", "Shop")" class="btn btn-primary btn-lg">
                        <i class="fas fa-shopping-cart me-2"></i>Bắt đầu mua sắm
                    </a>
                </div>
            </div>
        </div>
    }
</div>

<!-- Reorder Modal -->
<div class="modal fade" id="reorderModal" tabindex="-1" aria-labelledby="reorderModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reorderModalLabel">
                    <i class="fas fa-redo me-2"></i>Đặt lại đơn hàng
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="reorderModalBody">
                <div class="text-center py-4" id="reorderLoading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="mt-2 text-muted">Đang chuẩn bị danh sách sản phẩm...</p>
                </div>
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" id="confirmReorderBtn" style="display: none;">
                    <i class="fas fa-shopping-cart me-2"></i>Thêm vào giỏ hàng
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function reorderItems(orderId) {
            const btn = document.getElementById(`reorderBtn_${orderId}`);
            const originalContent = btn.innerHTML;

            // Show loading state
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Đang xử lý...';

            // Show modal immediately with loading state
            const modal = new bootstrap.Modal(document.getElementById('reorderModal'));
            modal.show();

            try {
                // Use the Web app's API proxy instead of direct API call
                const response = await fetch(`/User/ReorderOrder/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showReorderModal(result);
                } else {
                    document.getElementById('reorderModalBody').innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ${result.message || 'Có lỗi xảy ra khi chuẩn bị đặt lại đơn hàng'}
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Reorder error:', error);
                document.getElementById('reorderModalBody').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Có lỗi xảy ra khi kết nối đến server
                    </div>
                `;
            } finally {
                // Restore button state
                btn.disabled = false;
                btn.innerHTML = originalContent;
            }
        }

        function showReorderModal(reorderData) {
            // Hide loading spinner
            const loadingElement = document.getElementById('reorderLoading');
            if (loadingElement) {
                loadingElement.style.display = 'none';
            }

            const modalBody = document.getElementById('reorderModalBody');
            const confirmBtn = document.getElementById('confirmReorderBtn');

            let html = `
                <div class="mb-4">
                    <h6 class="text-primary">Đơn hàng gốc #${reorderData.originalOrderId}</h6>
                    <p class="text-muted mb-0">Tổng tiền gốc: <strong>${reorderData.originalTotalAmount.toLocaleString('vi-VN')}đ</strong></p>
                    <p class="text-success mb-0">Tổng tiền hiện tại: <strong>${reorderData.totalAmount.toLocaleString('vi-VN')}đ</strong></p>
                </div>
            `;

            if (reorderData.reorderItems && reorderData.reorderItems.length > 0) {
                html += `
                    <div class="mb-4">
                        <h6 class="text-success">
                            <i class="fas fa-check-circle me-2"></i>Sản phẩm có thể đặt lại (${reorderData.reorderItems.length})
                        </h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Sách</th>
                                        <th>Số lượng</th>
                                        <th>Giá gốc</th>
                                        <th>Giá hiện tại</th>
                                    </tr>
                                </thead>
                                <tbody>
                `;

                reorderData.reorderItems.forEach(item => {
                    const priceChanged = item.originalPrice !== item.currentPrice;
                    html += `
                        <tr>
                            <td>${item.bookTitle}</td>
                            <td>${item.availableQuantity}</td>
                            <td>${item.originalPrice.toLocaleString('vi-VN')}đ</td>
                            <td class="${priceChanged ? 'text-warning fw-bold' : ''}">${item.currentPrice.toLocaleString('vi-VN')}đ</td>
                        </tr>
                    `;
                });

                html += `
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;

                confirmBtn.style.display = 'inline-block';
                confirmBtn.onclick = () => addReorderItemsToCart(reorderData.reorderItems);
            }

            if (reorderData.priceChangedItems && reorderData.priceChangedItems.length > 0) {
                html += `
                    <div class="mb-4">
                        <h6 class="text-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>Sản phẩm có thay đổi giá
                        </h6>
                        <ul class="list-unstyled">
                `;
                reorderData.priceChangedItems.forEach(item => {
                    html += `<li class="text-warning"><i class="fas fa-arrow-right me-2"></i>${item}</li>`;
                });
                html += `
                        </ul>
                    </div>
                `;
            }

            if (reorderData.unavailableItems && reorderData.unavailableItems.length > 0) {
                html += `
                    <div class="mb-4">
                        <h6 class="text-danger">
                            <i class="fas fa-times-circle me-2"></i>Sản phẩm không thể đặt lại
                        </h6>
                        <ul class="list-unstyled">
                `;
                reorderData.unavailableItems.forEach(item => {
                    html += `<li class="text-danger"><i class="fas fa-times me-2"></i>${item}</li>`;
                });
                html += `
                        </ul>
                    </div>
                `;
            }

            modalBody.innerHTML = html;

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('reorderModal'));
            modal.show();
        }

        async function addReorderItemsToCart(items) {
            try {
                let addedCount = 0;
                let failedCount = 0;

                // Add each item to cart
                for (const item of items) {
                    try {
                        const response = await fetch('/Shop/AddToCart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                            },
                            body: JSON.stringify({
                                bookId: item.bookId,
                                quantity: item.availableQuantity
                            })
                        });

                        if (response.ok) {
                            addedCount++;
                        } else {
                            failedCount++;
                            console.error(`Failed to add ${item.bookTitle} to cart`);
                        }
                    } catch (error) {
                        failedCount++;
                        console.error(`Error adding ${item.bookTitle} to cart:`, error);
                    }
                }

                // Show result message
                if (addedCount > 0) {
                    showMessage('success', `Đã thêm ${addedCount} sản phẩm vào giỏ hàng!`);

                    // Update cart counter if it exists
                    updateCartCounter();
                }

                if (failedCount > 0) {
                    showMessage('warning', `${failedCount} sản phẩm không thể thêm vào giỏ hàng`);
                }

                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('reorderModal'));
                modal.hide();

                // Optionally redirect to cart page after a delay
                if (addedCount > 0) {
                    setTimeout(() => {
                        if (confirm('Bạn có muốn xem giỏ hàng không?')) {
                            window.location.href = '/Shop/Cart';
                        }
                    }, 1500);
                }

            } catch (error) {
                console.error('Error adding items to cart:', error);
                showMessage('error', 'Có lỗi xảy ra khi thêm sản phẩm vào giỏ hàng');
            }
        }

        // Helper function to update cart counter
        function updateCartCounter() {
            const cartCounters = document.querySelectorAll('.cart-counter');
            if (cartCounters.length > 0) {
                fetch('/Shop/GetCartCount')
                    .then(response => response.json())
                    .then(data => {
                        cartCounters.forEach(counter => {
                            if (data.count > 0) {
                                counter.textContent = data.count;
                                counter.style.display = 'inline-block';
                            } else {
                                counter.style.display = 'none';
                            }
                        });
                    })
                    .catch(error => console.error('Error updating cart counter:', error));
            }
        }

        // Helper function to show messages
        function showMessage(type, message) {
            // Create toast or alert
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'danger'} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            document.body.appendChild(alertDiv);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
}
