@model ShopViewModel
@{
    ViewData["Title"] = "Cửa hàng sách";
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row section-spacing">
        <div class="col-12">
            <div class="hero-section rounded">
                <h1 class="display-4 mb-0 text-black">
                    <i class="fas fa-store me-3"></i>Cửa hàng sách BookStore
                </h1>
                <p class="lead mb-0 text-secondary-custom">Khám phá thế giới tri thức với hàng ngàn đầu sách chất lượng</p>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row section-spacing">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="get" asp-action="Index">
                        <div class="row align-items-end">
                            <div class="col-md-4">
                                <label class="form-label">Tìm kiếm sách</label>
                                <div class="search-container position-relative">
                                    <div class="input-group">
                                        <input type="text" name="search" id="shopSearchInput" value="@Model.SearchTerm"
                                               class="form-control" placeholder="Nhập tên sách, tác giả..." autocomplete="off">
                                        <button type="button" class="btn btn-outline-secondary" id="clearShopSearch">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>

                                    <!-- Search Results Dropdown -->
                                    <div id="shopSearchResults" class="search-results position-absolute w-100 bg-white border rounded-bottom shadow-lg d-none" style="z-index: 1000; max-height: 400px; overflow-y: auto;">
                                        <!-- Results will be populated here -->
                                    </div>

                                    <!-- Loading indicator -->
                                    <div id="shopSearchLoading" class="text-center py-2 d-none">
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Đang tìm kiếm...</span>
                                        </div>
                                        <small class="text-muted ms-2">Đang tìm kiếm...</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Danh mục</label>
                                <select name="categoryId" class="form-select">
                                    <option value="">Tất cả danh mục</option>
                                    @foreach (var category in Model.Categories)
                                    {
                                        <option value="@category.Id" selected="@(Model.SelectedCategoryId == category.Id)">
                                            @category.Name
                                        </option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Hiển thị</label>
                                <select name="pageSize" class="form-select">
                                    <option value="12" selected="@(Model.PageSize == 12)">12 sách</option>
                                    <option value="24" selected="@(Model.PageSize == 24)">24 sách</option>
                                    <option value="48" selected="@(Model.PageSize == 48)">48 sách</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fas fa-search me-1"></i>Tìm kiếm
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Info and Grid Controls -->
    <div class="row mb-3 align-items-center">
        <div class="col-md-4">
            <p class="text-muted mb-0">@Model.PaginationInfo</p>
        </div>
        <div class="col-md-4 text-center">
            <!-- Grid View Controls -->
            <div class="grid-view-controls">
                <span class="text-muted small me-2">Hiển thị:</span>
                <button class="grid-view-btn" data-columns="2" onclick="changeGridView(2)" title="2 cột">
                    <i class="fas fa-th-large"></i>
                </button>
                <button class="grid-view-btn" data-columns="3" onclick="changeGridView(3)" title="3 cột">
                    <i class="fas fa-th"></i>
                </button>
                <button class="grid-view-btn" data-columns="4" onclick="changeGridView(4)" title="4 cột">
                    <i class="fas fa-grip-horizontal"></i>
                </button>
                <button class="grid-view-btn active" data-columns="5" onclick="changeGridView(5)" title="5 cột">
                    <i class="fas fa-grip-vertical"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4 text-end">
            @if (!string.IsNullOrEmpty(Model.SearchTerm) || Model.SelectedCategoryId.HasValue)
            {
                <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-secondary">
                    <i class="fas fa-times me-1"></i>Xóa bộ lọc
                </a>
            }
        </div>
    </div>

    <!-- Books Grid -->
    @{
        ViewBag.GridClass = "books-grid-5"; // Default 5-column grid for shop
        ViewBag.ShowPagination = true;
        ViewBag.PaginationModel = Model; // Pass the entire model for pagination
        ViewBag.SearchTerm = Model.SearchTerm;
        ViewBag.SelectedCategoryId = Model.SelectedCategoryId;
        
    }
    <!-- Books Grid -->
    <div class="row books-grid-5">
        @if (Model.Books != null && Model.Books.Any())
        {
            @foreach (var book in Model.Books)
            {
                <div class="col-lg-3 col-md-3 col-sm-4 col-6 book-grid-item mt-4">
                    <div class="">
                        <div class="card book-card h-100 shadow-sm">
                            <!-- Book Image -->
                            <div class="book-image-container position-relative">
                                <a href="@Url.Action("Details", "Shop", new { id = book.Id })">
                                    <img src="@(string.IsNullOrEmpty(book.ImageUrl) ? "/images/no-image.jpg" : book.ImageUrl)"
                                         alt="@book.Title"
                                         class="card-img-top object-fit-contain book-image">
                                </a>

                                @{
                                    var hasDiscount = book.IsDiscountActive;
                                    var finalPrice = book.DiscountedPrice;
                                    var discountPercent = book.DiscountPercentageDisplay;
                                }

                                <!-- Discount Badge -->
                                @if (hasDiscount)
                                {
                                    <div class="position-absolute top-0 start-0 m-2">
                                        <span class="badge bg-danger discount-badge">
                                            <i class="fas fa-percent me-1"></i>-@discountPercent%
                                        </span>
                                    </div>
                                }

                                <!-- Stock Badge -->
                                @if (book.IsInStock)
                                {
                                    @if (book.IsLowStock)
                                    {
                                        <span class="badge bg-warning stock-badge position-absolute top-0 end-0 m-2">
                                            Sắp hết
                                        </span>
                                    }
                                }
                                else
                                {
                                    <span class="badge bg-danger stock-badge position-absolute top-0 end-0 m-2">
                                        Hết hàng
                                    </span>
                                }
                            </div>

                            <!-- Book Info -->
                            <div class="card-body book-info d-flex flex-column">
                                <h6 class="card-title book-title">
                                    <a href="@Url.Action("Details", "Shop", new { id = book.Id })" class="text-decoration-none text-dark">
                                        @book.Title
                                    </a>
                                </h6>
                               

                                <div class="mt-auto">
                                    <!-- Price Section -->
                                    <div class="price-section mb-2">
                                        @if (hasDiscount)
                                        {
                                            <div class="d-flex flex-column">
                                                <div class="original-price text-muted text-decoration-line-through small mb-1">
                                                    @book.PriceFormatted
                                                </div>
                                                <div class="discounted-price text-danger fw-bold">
                                                    @book.DiscountedPriceFormatted
                                                </div>
                                                <small class="text-success">
                                                    <i class="fas fa-piggy-bank me-1"></i>Tiết kiệm: @book.TotalDiscountAmountFormatted
                                                </small>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="book-price text-danger fw-bold">@book.PriceFormatted</span>
                                        }
                                    </div>

                                    @if (book.IsInStock)
                                    {
                                        <button class="btn btn-outline-danger btn-sm w-100 add-to-cart-btn"
                                                onclick="addToCart(@book.Id)">
                                            <i class="fas fa-cart-plus me-1"></i>
                                            <span class="btn-text">Thêm vào giỏ</span>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-danger btn-sm w-100 add-to-cart-btn" disabled>
                                            <i class="fas fa-times me-1"></i>Hết hàng
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h4 class="text-muted">Không tìm thấy sách nào</h4>
                    <p class="text-muted">Hãy thử tìm kiếm với từ khóa khác hoặc xóa bộ lọc để xem tất cả sách</p>
                </div>
            </div>
        }
    </div>


</div>



@section Styles {
    <style>
        /* Search Results Styles */
        .search-results {
            border-top: none !important;
            border-top-left-radius: 0 !important;
            border-top-right-radius: 0 !important;
        }

        .search-result-item {
            padding: 12px 16px;
            border-bottom: 1px solid #e9ecef;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .search-result-item:hover {
            background-color: #f8f9fa;
        }

        .search-result-item:last-child {
            border-bottom: none;
        }

        .search-result-item.disabled {
            opacity: 0.6;
            cursor: not-allowed;
            background-color: #f8f9fa;
        }

        .search-result-item.disabled:hover {
            background-color: #f8f9fa;
        }

        .search-result-item.active {
            background-color: #e3f2fd;
        }
    </style>
}

@section Scripts {
    <script>
        // Global variables for shop search
        let shopSearchTimeout = null;

        // Initialize shop search when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeShopSearch();
        });

        // ===== SHOP SEARCH FUNCTIONALITY =====
        function initializeShopSearch() {
            const searchInput = document.getElementById('shopSearchInput');
            const searchResults = document.getElementById('shopSearchResults');
            const clearButton = document.getElementById('clearShopSearch');
            const loadingIndicator = document.getElementById('shopSearchLoading');

            if (!searchInput) return;

            // Search input event
            searchInput.addEventListener('input', function(e) {
                const term = e.target.value.trim();

                if (term.length < 2) {
                    hideShopSearchResults();
                    return;
                }

                // Debounce search
                clearTimeout(shopSearchTimeout);
                shopSearchTimeout = setTimeout(() => {
                    performShopSearch(term);
                }, 300);
            });

            // Clear search
            clearButton.addEventListener('click', function() {
                searchInput.value = '';
                hideShopSearchResults();
                searchInput.focus();
            });

            // Hide results when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                    hideShopSearchResults();
                }
            });

            // Keyboard navigation
            searchInput.addEventListener('keydown', function(e) {
                const items = searchResults.querySelectorAll('.search-result-item:not(.disabled)');
                const activeItem = searchResults.querySelector('.search-result-item.active');

                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    navigateShopSearchResults(items, activeItem, 'down');
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    navigateShopSearchResults(items, activeItem, 'up');
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (activeItem && !activeItem.classList.contains('disabled')) {
                        const bookId = activeItem.dataset.bookId;
                        window.location.href = `@Url.Action("Details", "Shop")/${bookId}`;
                    }
                } else if (e.key === 'Escape') {
                    hideShopSearchResults();
                }
            });
        }

        function performShopSearch(term) {
            const loadingIndicator = document.getElementById('shopSearchLoading');
            const searchResults = document.getElementById('shopSearchResults');

            // Show loading
            loadingIndicator.classList.remove('d-none');
            searchResults.classList.add('d-none');

            fetch(`@Url.Action("SearchProducts", "Shop")?term=${encodeURIComponent(term)}`)
                .then(response => response.json())
                .then(data => {
                    loadingIndicator.classList.add('d-none');

                    if (data.success && data.results && data.results.length > 0) {
                        displayShopSearchResults(data.results);
                    } else {
                        displayShopNoResults();
                    }
                })
                .catch(error => {
                    console.error('Search error:', error);
                    loadingIndicator.classList.add('d-none');
                    displayShopSearchError();
                });
        }

        function displayShopSearchResults(results) {
            const searchResults = document.getElementById('shopSearchResults');

            let html = '';
            results.forEach(book => {
                const isDisabled = !book.isInStock;
                const priceDisplay = book.isDiscountActive ?
                    `<span class="text-muted text-decoration-line-through small">${book.priceFormatted}</span>
                     <span class="text-danger fw-bold">${book.discountedPriceFormatted}</span>` :
                    `<span class="text-danger fw-bold">${book.priceFormatted}</span>`;

                html += `
                    <div class="search-result-item ${isDisabled ? 'disabled' : ''}" data-book-id="${book.id}">
                        <div class="d-flex align-items-center">
                            <img src="${book.imageUrl}" alt="${book.title}" class="me-3 rounded" style="width: 50px; height: 60px; object-fit: contain;">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${book.title}</h6>
                                <p class="mb-1 text-muted small">Tác giả: ${book.author}</p>
                                <p class="mb-1 text-muted small">Danh mục: ${book.category}</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>${priceDisplay}</div>
                                    <div class="text-end">
                                        ${isDisabled ?
                                            '<span class="badge bg-danger">Hết hàng</span>' :
                                            `<span class="badge bg-success">Còn ${book.quantity}</span>`
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            searchResults.innerHTML = html;
            searchResults.classList.remove('d-none');

            // Add click handlers
            searchResults.querySelectorAll('.search-result-item:not(.disabled)').forEach(item => {
                item.addEventListener('click', function() {
                    const bookId = this.dataset.bookId;
                    window.location.href = `@Url.Action("Details", "Shop")/${bookId}`;
                });
            });
        }

        function displayShopNoResults() {
            const searchResults = document.getElementById('shopSearchResults');
            searchResults.innerHTML = `
                <div class="text-center py-3">
                    <i class="fas fa-search text-muted mb-2"></i>
                    <p class="text-muted mb-0">Không tìm thấy sản phẩm nào</p>
                    <small class="text-muted">Thử tìm kiếm với từ khóa khác</small>
                </div>
            `;
            searchResults.classList.remove('d-none');
        }

        function displayShopSearchError() {
            const searchResults = document.getElementById('shopSearchResults');
            searchResults.innerHTML = `
                <div class="text-center py-3">
                    <i class="fas fa-exclamation-triangle text-warning mb-2"></i>
                    <p class="text-muted mb-0">Có lỗi xảy ra khi tìm kiếm</p>
                </div>
            `;
            searchResults.classList.remove('d-none');
        }

        function hideShopSearchResults() {
            const searchResults = document.getElementById('shopSearchResults');
            const loadingIndicator = document.getElementById('shopSearchLoading');

            searchResults.classList.add('d-none');
            loadingIndicator.classList.add('d-none');
        }

        function navigateShopSearchResults(items, activeItem, direction) {
            if (items.length === 0) return;

            // Remove current active
            if (activeItem) {
                activeItem.classList.remove('active');
            }

            let newIndex = 0;
            if (activeItem) {
                const currentIndex = Array.from(items).indexOf(activeItem);
                newIndex = direction === 'down' ?
                    (currentIndex + 1) % items.length :
                    (currentIndex - 1 + items.length) % items.length;
            }

            items[newIndex].classList.add('active');
            items[newIndex].scrollIntoView({ block: 'nearest' });
        }
    </script>
}
