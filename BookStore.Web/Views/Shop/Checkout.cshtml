@model CheckoutViewModel
@{
    ViewData["Title"] = "Thanh toán";
}

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Trang chủ</a></li>
                    <li class="breadcrumb-item"><a asp-action="Index">Cửa hàng</a></li>
                    <li class="breadcrumb-item"><a asp-action="Cart">Giỏ hàng</a></li>
                    <li class="breadcrumb-item active">Thanh toán</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">
                Thanh toán đơn hàng
            </h2>
        </div>
    </div>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <form asp-action="Checkout" method="post">
        @Html.AntiForgeryToken()
        
        <div class="row">
            <!-- Order Summary -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            Chi tiết đơn hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Model.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Sản phẩm</th>
                                            <th class="text-center">Số lượng</th>
                                            <th class="text-end">Đơn giá</th>
                                            <th class="text-end">Thành tiền</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < Model.Items.Count; i++)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <img src="@Model.Items[i].BookImageUrl" alt="@Model.Items[i].BookTitle" 
                                                             class="me-3 rounded-2" style="width: 60px; height: 80px; object-fit: contain;">
                                                        <div>
                                                            <h6 class="mb-0">@Model.Items[i].BookTitle</h6>
                                                        </div>
                                                    </div>
                                                    @Html.HiddenFor(m => m.Items[i].BookId)
                                                    @Html.HiddenFor(m => m.Items[i].BookTitle)
                                                    @Html.HiddenFor(m => m.Items[i].BookPrice)
                                                    @Html.HiddenFor(m => m.Items[i].BookImageUrl)
                                                    @Html.HiddenFor(m => m.Items[i].Quantity)
                                                    @Html.HiddenFor(m => m.Items[i].DiscountPercentage)
                                                    @Html.HiddenFor(m => m.Items[i].DiscountAmount)
                                                    @Html.HiddenFor(m => m.Items[i].IsOnSale)
                                                    @Html.HiddenFor(m => m.Items[i].DiscountedPrice)
                                                    @Html.HiddenFor(m => m.Items[i].IsDiscountActive)
                                                </td>
                                                <td class="text-center">
                                                    <span class="text-dark fw-semibold fs-6">@Model.Items[i].Quantity</span>
                                                </td>
                                                <td class="text-end">
                                                    @if (Model.Items[i].IsDiscountActive)
                                                    {
                                                        <div class="price-section">
                                                            <div class="text-muted text-decoration-line-through small">@Model.Items[i].BookPriceFormatted</div>
                                                            <div class="text-danger fw-bold">@Model.Items[i].EffectivePriceFormatted</div>
                                                            <span class="badge bg-danger small">-@((Model.Items[i].BookPrice - Model.Items[i].DiscountedPrice) / Model.Items[i].BookPrice * 100)</span>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-danger fw-bold">@Model.Items[i].BookPriceFormatted</span>
                                                    }
                                                </td>
                                                <td class="text-end">
                                                    @if (Model.Items[i].IsDiscountActive)
                                                    {
                                                        <div>
                                                            <div class="text-muted text-decoration-line-through small">@((Model.Items[i].BookPrice * Model.Items[i].Quantity).ToString("N0")) VNĐ</div>
                                                            <strong class="text-danger">@Model.Items[i].TotalPriceFormatted</strong>
                                                            <div class="text-success small">Tiết kiệm: @Model.Items[i].TotalSavings.ToString("N0") VNĐ</div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <strong class="text-danger">@Model.Items[i].TotalPriceFormatted</strong>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>

                <!-- Shipping Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-shipping-fast me-2"></i>Thông tin giao hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="ShippingAddress" class="form-label">
                                Địa chỉ giao hàng
                                <span id="apiStatus" class="badge bg-success ms-2 d-none">
                                    <i class="fas fa-check-circle me-1"></i>API sẵn sàng
                                </span>
                            </label>

                            <!-- Address Input with Autocomplete -->
                            <div class="position-relative">
                                <input asp-for="ShippingAddress" id="shippingAddressInput" class="form-control"
                                       placeholder="Nhập địa chỉ đầy đủ để giao hàng..." autocomplete="off" />

                                <!-- Address Suggestions Dropdown -->
                                <div id="addressSuggestions" class="address-suggestions position-absolute w-100 bg-white border rounded-bottom shadow-lg d-none" style="z-index: 1001; max-height: 300px; overflow-y: auto;">
                                    <!-- Address suggestions will be populated here -->
                                </div>
                            </div>
                            <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="PaymentMethod" class="form-label">Phương thức thanh toán</label>
                            <select asp-for="PaymentMethod" class="form-select" asp-items="@CheckoutViewModel.PaymentMethods" id="paymentMethodSelect">
                                <option value="">-- Chọn phương thức thanh toán --</option>
                            </select>
                            <span asp-validation-for="PaymentMethod" class="text-danger"></span>

                            <!-- PayOS Payment Info -->
                            <div id="payosInfo" class="mt-2 p-3 bg-light rounded d-none">
                                <div class="d-flex align-items-center mb-2">
                                    <i class="fas fa-credit-card text-primary me-2"></i>
                                    <strong class="text-primary">Thanh toán online qua PayOS</strong>
                                </div>
                                <ul class="mb-0 small text-muted">
                                    <li>Hỗ trợ thanh toán qua ATM, Internet Banking, Ví điện tử</li>
                                    <li>Bảo mật cao với công nghệ mã hóa SSL</li>
                                    <li>Giao dịch được xử lý ngay lập tức</li>
                                    <li>Sau khi thanh toán thành công, bạn sẽ được chuyển về trang xác nhận đơn hàng</li>
                                </ul>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">Ghi chú (tùy chọn)</label>
                            <textarea asp-for="Notes" class="form-control" rows="2" 
                                      placeholder="Ghi chú thêm cho đơn hàng..."></textarea>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Total -->
            <div class="col-lg-4">
                <div class="card sticky-top" style="top: 20px;">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-calculator me-2"></i>Tổng đơn hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tổng tiền hàng:</span>
                            <strong id="subtotal">@(Model.TotalAmountFormatted)</strong>
                        </div>

                        @{
                            var totalSavings = Model.Items.Sum(i => i.TotalSavings);
                        }
                        @if (totalSavings > 0)
                        {
                            <div class="d-flex justify-content-between mb-2 text-success">
                                <span>Tiết kiệm từ khuyến mãi:</span>
                                <strong>-@totalSavings.ToString("N0") VNĐ</strong>
                            </div>
                        }

                        <!-- Voucher Section -->
                        <div class="voucher-section mb-3">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" placeholder="Nhập mã voucher"
                                       id="voucherCode" name="VoucherCode" value="@Model.VoucherCode">
                                <button class="btn btn-outline-secondary" type="button" onclick="applyVoucher()">
                                    <span id="voucher-btn-text">Áp dụng</span>
                                    <span id="voucher-spinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                </button>
                            </div>
                            <div id="voucher-message" class="small"></div>

                            <!-- Hidden fields for voucher data -->
                            <input type="hidden" id="voucherDiscount" name="VoucherDiscount" value="@Model.VoucherDiscount" />
                            <input type="hidden" id="voucherFreeShipping" name="VoucherFreeShipping" value="@Model.VoucherFreeShipping.ToString().ToLower()" />
                        </div>

                        @if (Model.HasVoucher)
                        {
                            <div class="d-flex justify-content-between mb-2 text-success" id="voucher-discount-row">
                                <span>Giảm giá voucher:</span>
                                <strong id="voucher-discount-amount">-@Model.VoucherDiscountFormatted</strong>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-between mb-2 text-success d-none" id="voucher-discount-row">
                                <span>Giảm giá voucher:</span>
                                <strong id="voucher-discount-amount">-0 VNĐ</strong>
                            </div>
                        }

                        <div class="d-flex justify-content-between mb-2">
                            <span>Phí vận chuyển:</span>
                            <strong class="@(Model.ShippingFee == 0 ? "text-success" : "")" id="shipping-fee">
                                @if (Model.ShippingFee == 0)
                                {
                                    <span>Miễn phí</span>
                                }
                                else
                                {
                                    @Model.ShippingFeeFormatted
                                }
                                @if (Model.VoucherFreeShipping)
                                {
                                    <small class="text-success">(Voucher)</small>
                                }
                            </strong>
                        </div>
                        @if (Model.TotalAmount < 500000)
                        {
                            <small class="text-muted">
                                <i class="fas fa-info-circle"></i> 
                                Miễn phí vận chuyển cho đơn hàng từ 500,000 VNĐ
                            </small>
                        }
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Tổng thanh toán:</strong>
                            <strong class="text-primary fs-5" id="final-amount">@Model.FinalAmountFormatted</strong>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-check-circle me-2"></i>Đặt hàng
                            </button>
                            <a asp-action="Cart" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Quay lại giỏ hàng
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Styles {
    <style>
        /* Address Suggestions Styles */
        .address-suggestions {
            border-top: none !important;
            border-top-left-radius: 0 !important;
            border-top-right-radius: 0 !important;
            top: 100% !important;
            left: 0 !important;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1) !important;
        }

        .address-suggestion-item {
            padding: 12px 16px;
            border-bottom: 1px solid #e9ecef;
            cursor: pointer;
            transition: background-color 0.2s ease;
            background-color: white;
        }

        .address-suggestion-item:hover {
            background-color: #f8f9fa;
        }

        .address-suggestion-item:last-child {
            border-bottom: none;
        }

        /* Ensure the container is properly positioned */
        #addressSuggestions {
            margin-top: 1px;
            border: 1px solid #ced4da;
            border-top: none;
            background-color: white !important;
            z-index: 1050 !important;
        }

        /* Make sure suggestions are visible */
        #addressSuggestions:not(.d-none) {
            display: block !important;
        }

        /* Debug styles - remove after testing */
        #addressSuggestions.debug {
            background-color: yellow !important;
            border: 2px solid red !important;
        }
    </style>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<!-- Address Autocomplete Script - Moved outside section for immediate loading -->
<script>
        // Debug: Script loading check
        console.log('🚀 Address Autocomplete Script Loading...');

        // Configuration
        const GOONG_API_KEY = 'UcgP2TVpMRCoR1V7iLaL6yHuPhtTYDfFxlkSVChD'; // GOONG API key for geocoding
        console.log('✅ GOONG_API_KEY defined:', typeof GOONG_API_KEY);

        // Global variables
        let addressSearchTimeout = null;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeAddressAutocomplete();
            initializeVoucherFeatures();
            initializePaymentMethodHandling();
            checkApiStatus();
        });

        // Check API status
        function checkApiStatus() {
            const apiStatus = document.getElementById('apiStatus');

            // Check if API key is configured
            if (GOONG_API_KEY && GOONG_API_KEY !== 'YOUR_GOONG_API_KEY_HERE') {
                // Test API connectivity
                fetch(`https://rsapi.goong.io/Place/AutoComplete?api_key=${GOONG_API_KEY}&input=test&location=10.8231,106.6297&radius=1000`)
                    .then(response => {
                        if (response.ok) {
                            apiStatus.className = 'badge bg-success ms-2';
                            apiStatus.innerHTML = '<i class="fas fa-check-circle me-1"></i>API sẵn sàng';
                            apiStatus.classList.remove('d-none');
                        } else {
                            throw new Error('API response not ok');
                        }
                    })
                    .catch(error => {
                        console.warn('GOONG API test failed:', error);
                        apiStatus.className = 'badge bg-warning ms-2';
                        apiStatus.innerHTML = '<i class="fas fa-exclamation-triangle me-1"></i>API không khả dụng';
                        apiStatus.classList.remove('d-none');
                    });
            } else {
                apiStatus.className = 'badge bg-danger ms-2';
                apiStatus.innerHTML = '<i class="fas fa-times-circle me-1"></i>Chưa cấu hình API';
                apiStatus.classList.remove('d-none');
            }
        }

        // ===== ADDRESS AUTOCOMPLETE FUNCTIONALITY =====
        function initializeAddressAutocomplete() {
            console.log('Initializing address autocomplete...');
            const addressInput = document.getElementById('shippingAddressInput');
            const addressSuggestions = document.getElementById('addressSuggestions');

            console.log('Address input found:', !!addressInput);
            console.log('Address suggestions container found:', !!addressSuggestions);

            if (!addressInput) {
                console.error('Address input not found!');
                return;
            }

            if (!addressSuggestions) {
                console.error('Address suggestions container not found!');
                return;
            }

            // Address autocomplete
            addressInput.addEventListener('input', function(e) {
                const query = e.target.value.trim();
                console.log('Input changed, query:', query, 'length:', query.length);

                if (query.length < 3) {
                    console.log('Query too short, hiding suggestions');
                    hideAddressSuggestions();
                    return;
                }

                console.log('Starting search with debounce...');
                // Debounce address search
                clearTimeout(addressSearchTimeout);
                addressSearchTimeout = setTimeout(() => {
                    searchAddresses(query);
                }, 500);
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!addressInput.contains(e.target) && !addressSuggestions.contains(e.target)) {
                    hideAddressSuggestions();
                }
            });

            console.log('Address autocomplete initialized successfully');
        }

        function searchAddresses(query) {
            // Validate API key
            if (!GOONG_API_KEY || GOONG_API_KEY === 'YOUR_GOONG_API_KEY_HERE') {
                console.warn('GOONG API key not configured');
                hideAddressSuggestions();
                return;
            }

            console.log('Searching addresses for:', query);
            const url = `https://rsapi.goong.io/Place/AutoComplete?api_key=${GOONG_API_KEY}&input=${encodeURIComponent(query)}&location=10.8231,106.6297&radius=50000`;

            fetch(url)
                .then(response => {
                    console.log('API Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('API Response data:', data);
                    if (data.status === 'OK' && data.predictions && data.predictions.length > 0) {
                        displayAddressSuggestions(data.predictions);
                    } else {
                        console.log('No predictions found or API error');
                        hideAddressSuggestions();
                    }
                })
                .catch(error => {
                    console.error('Address search error:', error);
                    hideAddressSuggestions();
                });
        }

        function displayAddressSuggestions(predictions) {
            console.log('Displaying address suggestions:', predictions);
            const addressSuggestions = document.getElementById('addressSuggestions');

            if (!addressSuggestions) {
                console.error('Address suggestions container not found');
                return;
            }

            let html = '';
            predictions.slice(0, 5).forEach(prediction => {
                // Handle different response formats
                const mainText = prediction.structured_formatting?.main_text || prediction.description || 'Unknown address';
                const secondaryText = prediction.structured_formatting?.secondary_text || '';

                html += `
                    <div class="address-suggestion-item" data-place-id="${prediction.place_id}" style="cursor: pointer;">
                        <div class="d-flex align-items-start">
                            <i class="fas fa-map-marker-alt text-muted me-2 mt-1"></i>
                            <div>
                                <div class="fw-semibold">${mainText}</div>
                                ${secondaryText ? `<small class="text-muted">${secondaryText}</small>` : ''}
                            </div>
                        </div>
                    </div>
                `;
            });

            addressSuggestions.innerHTML = html;
            addressSuggestions.classList.remove('d-none');
            addressSuggestions.style.display = 'block';
            addressSuggestions.style.zIndex = '1050';

            console.log('Address suggestions displayed');
            console.log('Container classes:', addressSuggestions.className);
            console.log('Container style display:', addressSuggestions.style.display);
            console.log('Container visible:', !addressSuggestions.classList.contains('d-none'));
            console.log('Container HTML:', addressSuggestions.innerHTML.substring(0, 200) + '...');

            // Add click handlers
            addressSuggestions.querySelectorAll('.address-suggestion-item').forEach(item => {
                item.addEventListener('click', function() {
                    const placeId = this.dataset.placeId;
                    console.log('Address suggestion clicked:', placeId);
                    selectAddressSuggestion(placeId);
                });
            });
        }

        function selectAddressSuggestion(placeId) {
            // Validate API key
            if (!GOONG_API_KEY || GOONG_API_KEY === 'YOUR_GOONG_API_KEY_HERE') {
                showNotification('error', 'Chưa cấu hình API key cho dịch vụ địa chỉ.');
                return;
            }

            const url = `https://rsapi.goong.io/Place/Detail?place_id=${placeId}&api_key=${GOONG_API_KEY}`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'OK' && data.result) {
                        const place = data.result;
                        const address = place.formatted_address;

                        // Update address input
                        document.getElementById('shippingAddressInput').value = address;

                        hideAddressSuggestions();
                        showNotification('success', 'Đã chọn địa chỉ.');
                    }
                })
                .catch(error => {
                    console.error('Place detail error:', error);
                    showNotification('error', 'Có lỗi xảy ra khi chọn địa chỉ.');
                });
        }

        function hideAddressSuggestions() {
            console.log('Hiding address suggestions');
            const addressSuggestions = document.getElementById('addressSuggestions');
            if (addressSuggestions) {
                addressSuggestions.classList.add('d-none');
                console.log('Address suggestions hidden');
            } else {
                console.error('Address suggestions container not found when trying to hide');
            }
        }

        // ===== UTILITY FUNCTIONS =====
        function showNotification(type, message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'info'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            // Add to page
            document.body.appendChild(notification);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        function initializeVoucherFeatures() {
            // Allow Enter key to apply voucher
            const voucherInput = document.getElementById('voucherCode');
            if (voucherInput) {
                voucherInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        applyVoucher();
                    }
                });
            }
        }

        function initializePaymentMethodHandling() {
            const paymentMethodSelect = document.getElementById('paymentMethodSelect');
            const payosInfo = document.getElementById('payosInfo');

            if (paymentMethodSelect && payosInfo) {
                // Show/hide PayOS info based on selection
                paymentMethodSelect.addEventListener('change', function() {
                    if (this.value === 'PayOS') {
                        payosInfo.classList.remove('d-none');
                    } else {
                        payosInfo.classList.add('d-none');
                    }
                });

                // Check initial value
                if (paymentMethodSelect.value === 'PayOS') {
                    payosInfo.classList.remove('d-none');
                }
            }
        }

        // Voucher functionality
        function applyVoucher() {
            const voucherCode = document.getElementById('voucherCode').value.trim();
            const subtotalText = document.getElementById('subtotal').textContent;
            // Better parsing for VND currency format (handles commas and dots)
            const subtotalAmount = parseFloat(subtotalText.replace(/[^\d,]/g, '').replace(/,/g, '')) || 0;

            console.log('Subtotal text:', subtotalText);
            console.log('Parsed subtotal amount:', subtotalAmount);

            if (!voucherCode) {
                showVoucherMessage('Vui lòng nhập mã voucher', 'danger');
                return;
            }

            if (subtotalAmount <= 0) {
                showVoucherMessage('Không thể áp dụng voucher cho đơn hàng trống', 'danger');
                return;
            }

            // Show loading
            const btnText = document.getElementById('voucher-btn-text');
            const spinner = document.getElementById('voucher-spinner');
            btnText.classList.add('d-none');
            spinner.classList.remove('d-none');

            // Make AJAX request
            fetch('@Url.Action("ValidateVoucher", "Shop")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `voucherCode=${encodeURIComponent(voucherCode)}&orderAmount=${subtotalAmount}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Apply voucher
                    document.getElementById('voucherDiscount').value = data.discountAmount;
                    document.getElementById('voucherFreeShipping').value = data.freeShipping;

                    // Update UI
                    updateVoucherUI(data.discountAmount, data.freeShipping, subtotalAmount);
                    showVoucherMessage(data.message, 'success');
                } else {
                    showVoucherMessage(data.message, 'danger');
                }
            })
            .catch(error => {
                console.error('Voucher validation error:', error);
                showVoucherMessage('Có lỗi xảy ra khi kiểm tra voucher', 'danger');
            })
            .finally(() => {
                // Hide loading
                btnText.classList.remove('d-none');
                spinner.classList.add('d-none');
            });
        }

        function updateVoucherUI(discountAmount, freeShipping, subtotalAmount) {
            // Update discount display
            const voucherDiscountRow = document.getElementById('voucher-discount-row');
            const voucherDiscountAmount = document.getElementById('voucher-discount-amount');

            if (discountAmount > 0) {
                voucherDiscountRow.classList.remove('d-none');
                voucherDiscountAmount.textContent = `-${discountAmount.toLocaleString()} VNĐ`;
            } else {
                voucherDiscountRow.classList.add('d-none');
            }

            // Update shipping fee display
            const shippingFeeElement = document.getElementById('shipping-fee');
            if (freeShipping) {
                shippingFeeElement.innerHTML = '<span class="text-success">Miễn phí</span> <small class="text-success">(Voucher)</small>';
            }

            // Calculate and update final amount
            let finalAmount = subtotalAmount - discountAmount;
            if (!freeShipping && subtotalAmount < 500000) {
                finalAmount += 30000; // Add shipping fee if not free shipping
            }

            const finalAmountElement = document.getElementById('final-amount');
            finalAmountElement.textContent = `${finalAmount.toLocaleString()} VNĐ`;
        }

        function showVoucherMessage(message, type) {
            const messageDiv = document.getElementById('voucher-message');
            messageDiv.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>`;

            // Auto hide after 5 seconds
            setTimeout(() => {
                messageDiv.innerHTML = '';
            }, 5000);
        }





        // ===== UTILITY FUNCTIONS =====
        function showNotification(type, message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'info'} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            // Add to page
            document.body.appendChild(notification);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        function initializeVoucherFeatures() {
            // Allow Enter key to apply voucher
            const voucherInput = document.getElementById('voucherCode');
            if (voucherInput) {
                voucherInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        applyVoucher();
                    }
                });
            }
        }



        function updateVoucherUI(discountAmount, freeShipping, subtotalAmount) {
            console.log('updateVoucherUI called with:', { discountAmount, freeShipping, subtotalAmount });

            // Ensure discountAmount is a valid number
            const validDiscountAmount = parseFloat(discountAmount) || 0;

            // Show voucher discount row
            const voucherRow = document.getElementById('voucher-discount-row');
            const voucherAmountEl = document.getElementById('voucher-discount-amount');

            if (voucherRow && voucherAmountEl) {
                voucherRow.classList.remove('d-none');
                voucherAmountEl.textContent = `-${formatCurrency(validDiscountAmount)}`;
            }

            // Update shipping fee
            const shippingFeeEl = document.getElementById('shipping-fee');
            if (shippingFeeEl && (freeShipping || subtotalAmount >= 500000)) {
                shippingFeeEl.innerHTML = '<span>Miễn phí</span> <small class="text-success">(Voucher)</small>';
            }

            // Calculate and update final amount
            const currentShippingFee = (freeShipping || subtotalAmount >= 500000) ? 0 : 30000;
            const finalAmount = Math.max(0, subtotalAmount - validDiscountAmount + currentShippingFee);
            const finalAmountEl = document.getElementById('final-amount');
            if (finalAmountEl) {
                finalAmountEl.textContent = formatCurrency(finalAmount);
            }

            console.log('Final calculation:', { subtotalAmount, validDiscountAmount, currentShippingFee, finalAmount });
        }

        function clearVoucher() {
            const voucherDiscountEl = document.getElementById('voucherDiscount');
            const voucherFreeShippingEl = document.getElementById('voucherFreeShipping');

            if (voucherDiscountEl) voucherDiscountEl.value = '0';
            if (voucherFreeShippingEl) voucherFreeShippingEl.value = 'false';

            // Hide voucher discount row
            const voucherRow = document.getElementById('voucher-discount-row');
            if (voucherRow) {
                voucherRow.classList.add('d-none');
            }

            // Reset shipping fee
            const subtotalText = document.getElementById('subtotal').textContent;
            const subtotalAmount = parseFloat(subtotalText.replace(/[^\d,]/g, '').replace(/,/g, '')) || 0;
            const shippingFeeEl = document.getElementById('shipping-fee');

            if (shippingFeeEl) {
                if (subtotalAmount >= 500000) {
                    shippingFeeEl.innerHTML = '<span>Miễn phí</span>';
                } else {
                    shippingFeeEl.textContent = formatCurrency(30000);
                }
            }

            // Reset final amount
            const finalAmount = subtotalAmount + (subtotalAmount >= 500000 ? 0 : 30000);
            const finalAmountEl = document.getElementById('final-amount');
            if (finalAmountEl) {
                finalAmountEl.textContent = formatCurrency(finalAmount);
            }
        }

        // ===== DEBUG FUNCTIONS =====
        console.log('🔧 Defining debug functions...');

        // Test function - call from browser console: testAddressAutocomplete()
        window.testAddressAutocomplete = function() {
            console.log('=== Testing Address Autocomplete ===');
            console.log('API Key:', GOONG_API_KEY);

            const addressInput = document.getElementById('shippingAddressInput');
            const addressSuggestions = document.getElementById('addressSuggestions');

            console.log('Address input element:', addressInput);
            console.log('Address suggestions element:', addressSuggestions);

            if (addressInput && addressSuggestions) {
                console.log('Testing with query "95 Nguyen"...');
                // Force show suggestions for testing
                addressSuggestions.innerHTML = `
                    <div class="address-suggestion-item" style="padding: 12px; border-bottom: 1px solid #eee; cursor: pointer;">
                        <i class="fas fa-map-marker-alt text-muted me-2"></i>
                        Test Address - 95 Nguyen Du, Quan 1
                    </div>
                `;
                addressSuggestions.classList.remove('d-none');
                console.log('Test suggestions displayed');

                // Also test real API
                searchAddresses('95 Nguyen');
            } else {
                console.error('Required elements not found!');
            }
        };

        // Force show suggestions for debugging
        window.showTestSuggestions = function() {
            const addressSuggestions = document.getElementById('addressSuggestions');
            if (addressSuggestions) {
                addressSuggestions.innerHTML = `
                    <div class="address-suggestion-item" style="padding: 12px; border-bottom: 1px solid #eee; cursor: pointer; background: white;">
                        <i class="fas fa-map-marker-alt text-muted me-2"></i>
                        Test Address 1 - 95 Nguyen Du, Quan 1, TP.HCM
                    </div>
                    <div class="address-suggestion-item" style="padding: 12px; border-bottom: 1px solid #eee; cursor: pointer; background: white;">
                        <i class="fas fa-map-marker-alt text-muted me-2"></i>
                        Test Address 2 - 123 Le Loi, Quan 1, TP.HCM
                    </div>
                `;
                addressSuggestions.classList.remove('d-none');
                addressSuggestions.style.display = 'block';
                console.log('Test suggestions forced to show');
            }
        };

        // Payment method change handler (if needed for future enhancements)

        // Script loaded confirmation
        console.log('✅ Address Autocomplete Script Loaded Successfully!');
        console.log('🔧 Available functions: testAddressAutocomplete(), showTestSuggestions()');
</script>
