@model CheckoutViewModel
@{
    ViewData["Title"] = "Thanh toán";
}

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index" asp-controller="Home">Trang chủ</a></li>
                    <li class="breadcrumb-item"><a asp-action="Index">Cửa hàng</a></li>
                    <li class="breadcrumb-item"><a asp-action="Cart">Giỏ hàng</a></li>
                    <li class="breadcrumb-item active">Thanh toán</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">
                Thanh toán đơn hàng
            </h2>
        </div>
    </div>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <form asp-action="Checkout" method="post">
        @Html.AntiForgeryToken()
        
        <div class="row">
            <!-- Order Summary -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            Chi tiết đơn hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Model.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Sản phẩm</th>
                                            <th class="text-center">Số lượng</th>
                                            <th class="text-end">Đơn giá</th>
                                            <th class="text-end">Thành tiền</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < Model.Items.Count; i++)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <img src="@Model.Items[i].BookImageUrl" alt="@Model.Items[i].BookTitle" 
                                                             class="me-3 rounded-2" style="width: 60px; height: 80px; object-fit: contain;">
                                                        <div>
                                                            <h6 class="mb-0">@Model.Items[i].BookTitle</h6>
                                                        </div>
                                                    </div>
                                                    @Html.HiddenFor(m => m.Items[i].BookId)
                                                    @Html.HiddenFor(m => m.Items[i].BookTitle)
                                                    @Html.HiddenFor(m => m.Items[i].BookPrice)
                                                    @Html.HiddenFor(m => m.Items[i].BookImageUrl)
                                                    @Html.HiddenFor(m => m.Items[i].Quantity)
                                                </td>
                                                <td class="text-center">
                                                    <span class="text-dark fw-semibold fs-6">@Model.Items[i].Quantity</span>
                                                </td>
                                                <td class="text-end ">@Model.Items[i].BookPriceFormatted</td>
                                                <td class="text-end text-danger"><strong>@Model.Items[i].TotalPriceFormatted</strong></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>

                <!-- Shipping Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-shipping-fast me-2"></i>Thông tin giao hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="ShippingAddress" class="form-label">Địa chỉ giao hàng</label>
                            <textarea asp-for="ShippingAddress" class="form-control" rows="3" 
                                      placeholder="Nhập địa chỉ đầy đủ để giao hàng..."></textarea>
                            <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="PaymentMethod" class="form-label">Phương thức thanh toán</label>
                            <select asp-for="PaymentMethod" class="form-select" asp-items="@CheckoutViewModel.PaymentMethods">
                                <option value="">-- Chọn phương thức thanh toán --</option>
                            </select>
                            <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Notes" class="form-label">Ghi chú (tùy chọn)</label>
                            <textarea asp-for="Notes" class="form-control" rows="2" 
                                      placeholder="Ghi chú thêm cho đơn hàng..."></textarea>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Total -->
            <div class="col-lg-4">
                <div class="card sticky-top" style="top: 20px;">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-calculator me-2"></i>Tổng đơn hàng
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tổng tiền hàng:</span>
                            <strong id="subtotal">@(Model.TotalAmountFormatted)</strong>
                        </div>

                        <!-- Voucher Section -->
                        <div class="voucher-section mb-3">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" placeholder="Nhập mã voucher"
                                       id="voucherCode" name="VoucherCode" value="@Model.VoucherCode">
                                <button class="btn btn-outline-secondary" type="button" onclick="applyVoucher()">
                                    <span id="voucher-btn-text">Áp dụng</span>
                                    <span id="voucher-spinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                </button>
                            </div>
                            <div id="voucher-message" class="small"></div>

                            <!-- Hidden fields for voucher data -->
                            <input type="hidden" id="voucherDiscount" name="VoucherDiscount" value="@Model.VoucherDiscount" />
                            <input type="hidden" id="voucherFreeShipping" name="VoucherFreeShipping" value="@Model.VoucherFreeShipping.ToString().ToLower()" />
                        </div>

                        @if (Model.HasVoucher)
                        {
                            <div class="d-flex justify-content-between mb-2 text-success" id="voucher-discount-row">
                                <span>Giảm giá voucher:</span>
                                <strong id="voucher-discount-amount">-@Model.VoucherDiscountFormatted</strong>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-between mb-2 text-success d-none" id="voucher-discount-row">
                                <span>Giảm giá voucher:</span>
                                <strong id="voucher-discount-amount">-0 VNĐ</strong>
                            </div>
                        }

                        <div class="d-flex justify-content-between mb-2">
                            <span>Phí vận chuyển:</span>
                            <strong class="@(Model.ShippingFee == 0 ? "text-success" : "")" id="shipping-fee">
                                @if (Model.ShippingFee == 0)
                                {
                                    <span>Miễn phí</span>
                                }
                                else
                                {
                                    @Model.ShippingFeeFormatted
                                }
                                @if (Model.VoucherFreeShipping)
                                {
                                    <small class="text-success">(Voucher)</small>
                                }
                            </strong>
                        </div>
                        @if (Model.TotalAmount < 500000)
                        {
                            <small class="text-muted">
                                <i class="fas fa-info-circle"></i> 
                                Miễn phí vận chuyển cho đơn hàng từ 500,000 VNĐ
                            </small>
                        }
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Tổng thanh toán:</strong>
                            <strong class="text-primary fs-5" id="final-amount">@Model.FinalAmountFormatted</strong>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-check-circle me-2"></i>Đặt hàng
                            </button>
                            <a asp-action="Cart" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Quay lại giỏ hàng
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Voucher functionality
        function applyVoucher() {
            const voucherCode = document.getElementById('voucherCode').value.trim();
            const subtotalText = document.getElementById('subtotal').textContent;
            // Better parsing for VND currency format (handles commas and dots)
            const subtotalAmount = parseFloat(subtotalText.replace(/[^\d,]/g, '').replace(/,/g, '')) || 0;

            console.log('Subtotal text:', subtotalText);
            console.log('Parsed subtotal amount:', subtotalAmount);

            if (!voucherCode) {
                showVoucherMessage('Vui lòng nhập mã voucher', 'danger');
                return;
            }

            if (subtotalAmount <= 0) {
                showVoucherMessage('Không thể áp dụng voucher cho đơn hàng trống', 'danger');
                return;
            }

            // Show loading
            const btnText = document.getElementById('voucher-btn-text');
            const spinner = document.getElementById('voucher-spinner');
            btnText.classList.add('d-none');
            spinner.classList.remove('d-none');

            // Make AJAX request
            fetch('@Url.Action("ValidateVoucher", "Shop")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `voucherCode=${encodeURIComponent(voucherCode)}&orderAmount=${subtotalAmount}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Apply voucher
                    document.getElementById('voucherDiscount').value = data.discountAmount;
                    document.getElementById('voucherFreeShipping').value = data.freeShipping;

                    // Update UI
                    updateVoucherUI(data.discountAmount, data.freeShipping, subtotalAmount);
                    showVoucherMessage(data.message, 'success');
                } else {
                    showVoucherMessage(data.message, 'danger');
                    clearVoucher();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showVoucherMessage('Có lỗi xảy ra khi kiểm tra voucher', 'danger');
                clearVoucher();
            })
            .finally(() => {
                // Hide loading
                btnText.classList.remove('d-none');
                spinner.classList.add('d-none');
            });
        }

        function updateVoucherUI(discountAmount, freeShipping, subtotalAmount) {
            console.log('updateVoucherUI called with:', { discountAmount, freeShipping, subtotalAmount });

            // Ensure discountAmount is a valid number
            const validDiscountAmount = parseFloat(discountAmount) || 0;

            // Show voucher discount row
            const voucherRow = document.getElementById('voucher-discount-row');
            const voucherAmountEl = document.getElementById('voucher-discount-amount');

            if (voucherRow && voucherAmountEl) {
                voucherRow.classList.remove('d-none');
                voucherAmountEl.textContent = `-${formatCurrency(validDiscountAmount)}`;
            }

            // Update shipping fee
            const shippingFeeEl = document.getElementById('shipping-fee');
            if (shippingFeeEl && (freeShipping || subtotalAmount >= 500000)) {
                shippingFeeEl.innerHTML = '<span>Miễn phí</span> <small class="text-success">(Voucher)</small>';
            }

            // Calculate and update final amount
            const currentShippingFee = (freeShipping || subtotalAmount >= 500000) ? 0 : 30000;
            const finalAmount = Math.max(0, subtotalAmount - validDiscountAmount + currentShippingFee);
            const finalAmountEl = document.getElementById('final-amount');
            if (finalAmountEl) {
                finalAmountEl.textContent = formatCurrency(finalAmount);
            }

            console.log('Final calculation:', { subtotalAmount, validDiscountAmount, currentShippingFee, finalAmount });
        }

        function clearVoucher() {
            const voucherDiscountEl = document.getElementById('voucherDiscount');
            const voucherFreeShippingEl = document.getElementById('voucherFreeShipping');

            if (voucherDiscountEl) voucherDiscountEl.value = '0';
            if (voucherFreeShippingEl) voucherFreeShippingEl.value = 'false';

            // Hide voucher discount row
            const voucherRow = document.getElementById('voucher-discount-row');
            if (voucherRow) {
                voucherRow.classList.add('d-none');
            }

            // Reset shipping fee
            const subtotalText = document.getElementById('subtotal').textContent;
            const subtotalAmount = parseFloat(subtotalText.replace(/[^\d,]/g, '').replace(/,/g, '')) || 0;
            const shippingFeeEl = document.getElementById('shipping-fee');

            if (shippingFeeEl) {
                if (subtotalAmount >= 500000) {
                    shippingFeeEl.innerHTML = '<span>Miễn phí</span>';
                } else {
                    shippingFeeEl.textContent = formatCurrency(30000);
                }
            }

            // Reset final amount
            const finalAmount = subtotalAmount + (subtotalAmount >= 500000 ? 0 : 30000);
            const finalAmountEl = document.getElementById('final-amount');
            if (finalAmountEl) {
                finalAmountEl.textContent = formatCurrency(finalAmount);
            }
        }

        function showVoucherMessage(message, type) {
            const messageEl = document.getElementById('voucher-message');
            messageEl.textContent = message;
            messageEl.className = `small text-${type}`;
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN').format(amount) + ' VNĐ';
        }

        // Payment method change handler
        document.addEventListener('DOMContentLoaded', function() {
            // Allow Enter key to apply voucher
            const voucherInput = document.getElementById('voucherCode');
            if (voucherInput) {
                voucherInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        applyVoucher();
                    }
                });
            }
        });
    </script>
}
